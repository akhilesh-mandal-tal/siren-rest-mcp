openapi: 3.0.3
info:
  title: E-commerce Backend API
  description: |
    REST API for e-commerce platform prototype. 
    Supports product browsing with filtering by category, brand, and price range, 
    as well as order management functionality.
  version: 1.0.0
  contact:
    name: E-commerce Team
    email: developer@ecommerce.com
  license:
    name: MIT License
    url: https://choosealicense.com/licenses/mit/
servers:
  - url: http://localhost:8080
    description: Development server

paths:
  /api/products:
    get:
      tags:
        - Products
      summary: Get all products with optional filtering
      description: Retrieve products with optional filters by category, brand, and price range
      parameters:
        - name: categoryId
          in: query
          description: Filter by category ID
          required: false
          schema:
            type: integer
            format: int64
        - name: brand
          in: query
          description: Filter by brand name (case insensitive)
          required: false
          schema:
            type: string
        - name: minPrice
          in: query
          description: Minimum price filter
          required: false
          schema:
            type: number
            format: double
            minimum: 0
        - name: maxPrice
          in: query
          description: Maximum price filter
          required: false
          schema:
            type: number
            format: double
            minimum: 0
        - name: search
          in: query
          description: Search by product name
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of products with category information
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '500':
          description: Internal server error
    
    post:
      tags:
        - Products
      summary: Create a new product
      description: Add a new product to the catalog
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid input or category not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Internal server error

  /api/products/{id}:
    get:
      tags:
        - Products
      summary: Get product by ID
      description: Retrieve a specific product by its ID
      parameters:
        - name: id
          in: path
          description: Product ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
        '500':
          description: Internal server error
    
    put:
      tags:
        - Products
      summary: Update a product
      description: Update an existing product
      parameters:
        - name: id
          in: path
          description: Product ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid input or category not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '404':
          description: Product not found
        '500':
          description: Internal server error
    
    delete:
      tags:
        - Products
      summary: Delete a product
      description: Remove a product from the catalog
      parameters:
        - name: id
          in: path
          description: Product ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Product deleted successfully
        '404':
          description: Product not found
        '500':
          description: Internal server error

  /api/products/category/{categoryId}:
    get:
      tags:
        - Products
      summary: Get products by category
      description: Retrieve all products in a specific category. By default returns product summaries without category info (since category is known from the path). Use includeCategory=true to get full products with category details.
      parameters:
        - name: categoryId
          in: path
          description: Category ID
          required: true
          schema:
            type: integer
            format: int64
        - name: includeCategory
          in: query
          description: Whether to include category information in the response
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: List of products in the category
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      $ref: '#/components/schemas/ProductSummary'
                    description: Product summaries when includeCategory=false (default)
                  - type: array
                    items:
                      $ref: '#/components/schemas/Product'
                    description: Full products with category when includeCategory=true
        '404':
          description: Category not found
        '500':
          description: Internal server error

  /api/categories:
    get:
      tags:
        - Categories
      summary: Get all categories
      description: Retrieve all product categories. By default returns category summaries without products. Use includeProducts=true to get full categories with products.
      parameters:
        - name: includeProducts
          in: query
          description: Whether to include products in the response
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      $ref: '#/components/schemas/CategorySummary'
                    description: Category summaries when includeProducts=false (default)
                  - type: array
                    items:
                      $ref: '#/components/schemas/Category'
                    description: Full categories with products when includeProducts=true
        '500':
          description: Internal server error
    
    post:
      tags:
        - Categories
      summary: Create a new category
      description: Add a new product category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCategoryRequest'
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid input
        '500':
          description: Internal server error

  /api/categories/{id}:
    get:
      tags:
        - Categories
      summary: Get category by ID
      description: Retrieve a specific category by its ID
      parameters:
        - name: id
          in: path
          description: Category ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Category details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: Category not found
        '500':
          description: Internal server error
    
    put:
      tags:
        - Categories
      summary: Update a category
      description: Update an existing category
      parameters:
        - name: id
          in: path
          description: Category ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCategoryRequest'
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid input
        '404':
          description: Category not found
        '500':
          description: Internal server error
    
    delete:
      tags:
        - Categories
      summary: Delete a category
      description: Remove a category
      parameters:
        - name: id
          in: path
          description: Category ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Category deleted successfully
        '404':
          description: Category not found
        '500':
          description: Internal server error

  /api/orders:
    get:
      tags:
        - Orders
      summary: Get orders by customer email
      description: Retrieve orders for a specific customer sorted by order date (newest first)
      parameters:
        - name: customerEmail
          in: query
          description: Customer email address (required)
          required: true
          schema:
            type: string
            format: email
        - name: status
          in: query
          description: Filter by order status
          required: false
          schema:
            $ref: '#/components/schemas/OrderStatus'
      responses:
        '200':
          description: List of orders for the customer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          description: Missing or invalid customerEmail parameter
        '500':
          description: Internal server error
    
    post:
      tags:
        - Orders
      summary: Create a new order
      description: Create a new order with order items
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input or insufficient stock
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Internal server error

  /api/orders/{id}:
    get:
      tags:
        - Orders
      summary: Get order by ID
      description: Retrieve a specific order by its ID
      parameters:
        - name: id
          in: path
          description: Order ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
        '500':
          description: Internal server error
    
    delete:
      tags:
        - Orders
      summary: Cancel an order
      description: Cancel an order and restore stock quantities
      parameters:
        - name: id
          in: path
          description: Order ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Order cancelled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Cannot cancel order (invalid status)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '404':
          description: Order not found
        '500':
          description: Internal server error

  /api/orders/number/{orderNumber}:
    get:
      tags:
        - Orders
      summary: Get order by order number
      description: Retrieve a specific order by its order number
      parameters:
        - name: orderNumber
          in: path
          description: Order number
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
        '500':
          description: Internal server error

  /api/orders/{id}/status:
    put:
      tags:
        - Orders
      summary: Update order status
      description: Update the status of an existing order
      parameters:
        - name: id
          in: path
          description: Order ID
          required: true
          schema:
            type: integer
            format: int64
        - name: status
          in: query
          description: New order status
          required: true
          schema:
            $ref: '#/components/schemas/OrderStatus'
      responses:
        '200':
          description: Order status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
        '500':
          description: Internal server error

components:
  schemas:
    CategorySummary:
      type: object
      description: Lightweight category representation without products
      properties:
        id:
          type: integer
          format: int64
          description: Category ID
        name:
          type: string
          description: Category name
        description:
          type: string
          description: Category description
      required:
        - id
        - name

    Category:
      type: object
      description: Full category representation with products
      properties:
        id:
          type: integer
          format: int64
          description: Category ID
        name:
          type: string
          description: Category name
        description:
          type: string
          description: Category description
        products:
          type: array
          description: Products in this category (without nested category to avoid circular reference)
          items:
            $ref: '#/components/schemas/ProductSummary'
      required:
        - id
        - name

    CreateCategoryRequest:
      type: object
      properties:
        name:
          type: string
          description: Category name
          minLength: 1
        description:
          type: string
          description: Category description
      required:
        - name

    ProductSummary:
      type: object
      description: Lightweight product representation without category details
      properties:
        id:
          type: integer
          format: int64
          description: Product ID
        name:
          type: string
          description: Product name
        description:
          type: string
          description: Product description
        price:
          type: number
          format: double
          minimum: 0
          description: Product price
        brand:
          type: string
          description: Product brand
        imageUrl:
          type: string
          description: Product image URL
        stockQuantity:
          type: integer
          minimum: 0
          description: Available stock quantity
      required:
        - id
        - name
        - price
        - brand
        - stockQuantity

    Product:
      type: object
      description: Full product representation with category summary
      properties:
        id:
          type: integer
          format: int64
          description: Product ID
        name:
          type: string
          description: Product name
        description:
          type: string
          description: Product description
        price:
          type: number
          format: double
          minimum: 0
          description: Product price
        brand:
          type: string
          description: Product brand
        imageUrl:
          type: string
          description: Product image URL
        stockQuantity:
          type: integer
          minimum: 0
          description: Available stock quantity
        category:
          $ref: '#/components/schemas/CategorySummary'
      required:
        - id
        - name
        - price
        - brand
        - category
        - stockQuantity

    CreateProductRequest:
      type: object
      properties:
        name:
          type: string
          description: Product name
          minLength: 1
        description:
          type: string
          description: Product description
        price:
          type: number
          format: double
          minimum: 0.01
          description: Product price
        brand:
          type: string
          description: Product brand
          minLength: 1
        imageUrl:
          type: string
          description: Product image URL
        stockQuantity:
          type: integer
          minimum: 0
          description: Available stock quantity
          default: 0
        categoryId:
          type: integer
          format: int64
          description: ID of the category this product belongs to
      required:
        - name
        - price
        - brand
        - categoryId

    OrderStatus:
      type: string
      enum:
        - PENDING
        - CONFIRMED
        - SHIPPED
        - DELIVERED
        - CANCELLED
      description: Order status

    OrderItem:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Order item ID
        product:
          $ref: '#/components/schemas/Product'
        quantity:
          type: integer
          minimum: 1
          description: Quantity ordered
        unitPrice:
          type: number
          format: double
          minimum: 0
          description: Unit price at time of order
        subtotal:
          type: number
          format: double
          minimum: 0
          description: Calculated subtotal (quantity * unitPrice)
      required:
        - id
        - product
        - quantity
        - unitPrice

    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Order ID
        orderNumber:
          type: string
          description: Unique order number
        status:
          $ref: '#/components/schemas/OrderStatus'
        orderDate:
          type: string
          format: date-time
          description: Order creation date
        customerEmail:
          type: string
          format: email
          description: Customer email
        customerName:
          type: string
          description: Customer name
        shippingAddress:
          type: string
          description: Shipping address
        totalAmount:
          type: number
          format: double
          minimum: 0
          description: Total order amount
        orderItems:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
          description: List of order items
      required:
        - id
        - orderNumber
        - status
        - orderDate
        - customerEmail
        - customerName
        - totalAmount
        - orderItems

    CreateOrderItemRequest:
      type: object
      properties:
        productId:
          type: integer
          format: int64
          description: Product ID
        quantity:
          type: integer
          minimum: 1
          description: Quantity to order
      required:
        - productId
        - quantity

    CreateOrderRequest:
      type: object
      properties:
        customerEmail:
          type: string
          format: email
          description: Customer email
        customerName:
          type: string
          description: Customer name
          minLength: 1
        shippingAddress:
          type: string
          description: Shipping address
        orderItems:
          type: array
          items:
            $ref: '#/components/schemas/CreateOrderItemRequest'
          minItems: 1
          description: List of items to order
      required:
        - customerEmail
        - customerName
        - orderItems

  /api/metadata/brands:
    get:
      tags:
        - Metadata
      summary: Get all available brands
      description: Retrieve all unique brand names across all products
      responses:
        '200':
          description: List of brand names
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '500':
          description: Internal server error

  /api/metadata/brands/category/{categoryId}:
    get:
      tags:
        - Metadata
      summary: Get brands by category
      description: Retrieve all unique brand names for products in a specific category
      parameters:
        - name: categoryId
          in: path
          description: Category ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: List of brand names in the category
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '500':
          description: Internal server error

  /api/metadata/price-range:
    get:
      tags:
        - Metadata
      summary: Get global price range
      description: Get the minimum and maximum prices across all products
      responses:
        '200':
          description: Price range information
          content:
            application/json:
              schema:
                type: object
                properties:
                  minPrice:
                    type: number
                    format: double
                  maxPrice:
                    type: number
                    format: double
        '500':
          description: Internal server error

  /api/metadata/price-range/category/{categoryId}:
    get:
      tags:
        - Metadata
      summary: Get price range by category
      description: Get the minimum and maximum prices for products in a specific category
      parameters:
        - name: categoryId
          in: path
          description: Category ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Price range information for the category
          content:
            application/json:
              schema:
                type: object
                properties:
                  minPrice:
                    type: number
                    format: double
                  maxPrice:
                    type: number
                    format: double
                  categoryId:
                    type: integer
                    format: int64
        '500':
          description: Internal server error

tags:
  - name: Products
    description: Product management operations
  - name: Categories
    description: Category management operations  
  - name: Orders
    description: Order management operations
  - name: Metadata
    description: Metadata and filtering helper operations